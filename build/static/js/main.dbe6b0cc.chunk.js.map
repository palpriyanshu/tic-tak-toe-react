{"version":3,"sources":["Message.js","Tile.js","Board.js","Game.js","App.js","serviceWorker.js","index.js"],"names":["Message","winner","hasDrawn","currentPlayer","msg","name","className","Tile","props","id","value","handleClick","onClick","disable","disabled","Board","isGameOver","tiles","map","index","key","Game","state","player1","nextPlayer","player2","bind","this","setState","slice","symbol","some","tilesCombination","every","tileIndex","hasWon","player1Symbol","player2Symbol","tileValue","React","Component","App","Boolean","window","location","hostname","match","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","error","console","message"],"mappings":"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","file":"static/js/main.dbe6b0cc.chunk.js","sourcesContent":["import React from 'react';\n\nconst Message = ({ winner, hasDrawn, currentPlayer }) => {\n  let msg = `${currentPlayer.name} has turn`;\n  if (winner) {\n    msg = `${currentPlayer.name} has won`;\n  }\n  if (hasDrawn) {\n    msg = 'Game has drawn';\n  }\n  return <h3 className=\"msgBox\">{msg}</h3>;\n};\n\nexport default Message;\n","import React from 'react';\n\nconst Tile = function (props) {\n  const { id, value, onClick: handleClick } = props;\n  const disable = value ? true : false;\n  return (\n    <button disabled={disable} onClick={() => handleClick(id)} className=\"tile\">\n      {value}\n    </button>\n  );\n};\n\nexport default Tile;\n","import React from 'react';\nimport Tile from './Tile';\n\nconst Board = (props) => {\n  const className = props.isGameOver ? 'disabled board' : 'board';\n\n  return (\n    <div className={className}>\n      {props.tiles.map((value, index) => (\n        <Tile onClick={props.onClick} value={value} key={index} id={index} />\n      ))}\n    </div>\n  );\n};\n\nexport default Board;\n","import React from 'react';\nimport Message from './Message';\nimport Board from './Board';\n\nconst hasWon = function (tiles, value) {\n  const winningConditions = [\n    [0, 1, 2],\n    [3, 4, 5],\n    [6, 7, 8],\n    [0, 3, 6],\n    [1, 4, 7],\n    [2, 5, 8],\n    [0, 4, 8],\n    [2, 4, 6],\n  ];\n  return winningConditions.some((tilesCombination) =>\n    tilesCombination.every((tileIndex) => tiles[tileIndex] === value)\n  );\n};\n\nconst hasDrawn = function (tiles, player1Symbol, player2Symbol) {\n  return tiles.every(\n    (tileValue) => tileValue === player1Symbol || tileValue === player2Symbol\n  );\n};\n\nclass Game extends React.Component {\n  constructor(props) {\n    super(props);\n    this.state = {\n      currentPlayer: this.props.player1,\n      nextPlayer: this.props.player2,\n      tiles: ['', '', '', '', '', '', '', '', ''],\n      winner: '',\n      hasDrawn: false,\n    };\n\n    this.handleClick = this.handleClick.bind(this);\n  }\n\n  handleClick(id) {\n    this.setState((state) => {\n      const tiles = state.tiles.slice();\n      const { currentPlayer, nextPlayer } = state;\n      tiles[id] = currentPlayer.symbol;\n\n      if (hasWon(tiles, currentPlayer.symbol)) {\n        return { winner: currentPlayer.name, tiles };\n      }\n\n      if (hasDrawn(tiles, currentPlayer.symbol, nextPlayer.symbol)) {\n        return { hasDrawn: true, tiles };\n      }\n      return { tiles, currentPlayer: nextPlayer, nextPlayer: currentPlayer };\n    });\n  }\n\n  render() {\n    const { winner, hasDrawn, currentPlayer } = this.state;\n    return (\n      <div className=\"game\">\n        <h1>Tic-Tac-Toe</h1>\n        <Message\n          winner={winner}\n          hasDrawn={hasDrawn}\n          currentPlayer={currentPlayer}\n        />\n        <Board\n          isGameOver={winner || hasDrawn}\n          onClick={this.handleClick}\n          tiles={this.state.tiles}\n        />\n      </div>\n    );\n  }\n}\n\nexport default Game;\n","import React from 'react';\nimport Game from './Game';\nimport './App.css';\n\nconst App = (props) => (\n  <Game\n    player1={{ name: 'Tom', symbol: '0' }}\n    player2={{ name: 'Jerry', symbol: 'X' }}\n  />\n);\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}